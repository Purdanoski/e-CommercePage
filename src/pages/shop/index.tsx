import type { GetServerSideProps, GetStaticProps, NextPage } from "next";
import Head from "next/head";

import { useRouter } from "next/router";
import { useRef } from "react";
import Link from "next/link";
import { FeaturedData } from "../../interfaces/interface";

interface Props {
  data: FeaturedData[];
}

const Shop: NextPage<Props> = ({ data }) => {
  const router = useRouter();
  const inputRef = useRef<HTMLInputElement>(null);

  const handleFilterClick = (e: React.MouseEvent<HTMLElement>) => {
    const dataFilterValue = e.currentTarget.getAttribute("data-filter");
    const selectedValue = dataFilterValue?.slice(1);

    if (selectedValue) {
      router.push({
        pathname: "/shop",
        query: {
          ...router.query,
          category: selectedValue,
        },
      });
    } else {
      router.push({
        pathname: "/shop",
      });
    }
  };

  const handleSearchClick = (e: React.MouseEvent<HTMLElement>) => {
    if (inputRef.current?.value !== "") {
      router.push({
        pathname: "/shop",
        query: {
          ...router.query,
          search: inputRef.current?.value,
        },
      });
    } else {
      const { search, ...updatedQuery } = router.query;
      router.push({
        pathname: "/shop",
        query: updatedQuery,
      });
    }
  };

  return (
    <>
      <Head>
        <title>Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg0 m-t-23 p-b-140">
        <div className="container">
          <div className="flex-w flex-sb-m p-b-52">
            <div className="flex-w flex-l-m filter-tope-group m-tb-10">
              <button
                onClick={handleFilterClick}
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.asPath === "/shop" && "how-active1"
                }`}
                data-filter="*">
                All Products
              </button>

              <button
                onClick={handleFilterClick}
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.asPath.includes("women") && "how-active1"
                }`}
                data-filter=".women">
                Women
              </button>

              <button
                onClick={handleFilterClick}
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.asPath.includes("man") && "how-active1"
                }`}
                data-filter=".man">
                Men
              </button>

              {/* <button onClick={handleFilterClick} 
              className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${router.asPath.includes('belt')  && 'how-active1'}`}
              data-filter=".belt"
              >
                Belt
              </button>

              <button onClick={handleFilterClick}
                   className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${router.asPath.includes('shoes')  && 'how-active1'}`}
                data-filter=".shoes"
              >
                Shoes
              </button>

              <button onClick={handleFilterClick}
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${router.asPath.includes('watches')  && 'how-active1'}`}
                data-filter=".watch"
              >
                Watches
              </button> */}
            </div>

            <div onClick={handleSearchClick} className="flex-w flex-c-m m-tb-10">
              <div className="flex-c-m stext-106 cl6 size-105 bor4 pointer hov-btn3 trans-04 m-tb-4 js-show-search show-search">
                <i className="icon-search cl2 m-r-6 fs-15 trans-04 zmdi zmdi-search"></i>
                Search
              </div>
            </div>
            {/* search */}
            <div className="panel-search w-full p-t-10 p-b-15">
              <div className="bor8 dis-flex p-l-15">
                <button className="size-113 flex-c-m fs-16 cl2 hov-cl1 trans-04">
                  <i className="zmdi zmdi-search"></i>
                </button>

                <input
                  className="mtext-107 cl2 size-114 plh2 p-r-15"
                  type="text"
                  name="search-product"
                  placeholder="Search"
                  ref={inputRef}
                />
              </div>
            </div>
          </div>
          <div className="row isotope-grid">
            {data.length > 0
              ? data?.map((item: FeaturedData) => (
                  <Link href={`shop/${item.id}`}>
                    <div className="col-sm-6 col-md-4 col-lg-3 p-b-35 isotope-item women">
                      <div className="block2">
                        <div className="block2-pic hov-img0">
                          <img src={item.img} alt="IMG-PRODUCT" />
                          <a
                            href="#"
                            className="block2-btn flex-c-m stext-103 cl2 size-102 bg0 bor2 hov-btn1 p-lr-15 trans-04 js-show-modal1">
                            View Details
                          </a>
                        </div>
                        <div className="block2-txt flex-w flex-t p-t-14">
                          <div className="block2-txt-child1 flex-col-l ">
                            <a href="product-detail.html" className="stext-104 cl4 hov-cl1 trans-04 js-name-b2 p-b-6">
                              {item.title}
                            </a>
                            <span className="stext-105 cl3">{item.price}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Link>
                ))
              : "No results"}
          </div>
        </div>
      </div>
    </>
  );
};

export default Shop;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  let res;
  if (query.category && query.search) {
    res = await fetch(`http://localhost:5001/products?gender_like=${query.category}&q=${query.search}`);
  } else if (query.category) {
    res = await fetch(`http://localhost:5001/products?gender_like=${query.category}`);
  } else if (query.search) {
    res = await fetch(`http://localhost:5001/products?q=${query.search}`);
  } else {
    res = await fetch("http://localhost:5001/products");
  }
  const data = await res.json();

  return {
    props: {
      data,
    },
  };
};
